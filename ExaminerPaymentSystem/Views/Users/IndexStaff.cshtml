@using ExaminerPaymentSystem.ViewModels.Common
@model IEnumerable<ApplicationUserViewModel>

@inject SignInManager<ApplicationUser> SignInManager






@{
    ViewBag.Title = "Users";
    string examCode = ViewBag.ExamCode ?? "";
    string subjectCode = ViewBag.SubjectCode ?? "";
    string paperCode = ViewBag.PaperCode ?? "";
    string regionCode = ViewBag.RegionCode ?? "";

}




<!-- Header Section -->
<div class="text-center mb-1">
    <h4 class="fw-bold text-black">Users (ZIMSEC STAFF)</h4>
    <hr class="border-2 border-primary w-50 mx-auto" />
</div>


@if (User.IsInRole("Admin"))
{

    <!-- Admin Buttons -->
    <div class="card mt-4 mb-2 shadow-sm border-0">
        <div class="card-header bg-white border-0">
            <div class="row justify-content-end">
                <div class="d-flex gap-2">
              

                    <!-- Add Users Link -->
                    <a class="btn btn-primary px-3 py-2 d-flex align-items-center text-white"
                       asp-controller="Users"
                       asp-action="AddOtherUsers"
                       style="border-radius: 50px; background-color: #153355; transition: background-color 0.3s;">
                        <i class="fas fa-user-tie me-2"></i> Add User
                    </a>
                </div>

            </div>
        </div>
    </div>
}

<!-- Card Section -->
<div class="card p-4 shadow-sm border-0">
    <div class="card-body">
        <div class="table-responsive">
            <table id="usersTable" class="table table-bordered table-striped">
                <thead class="table-light">
                    <tr>
                        <th>Last Name</th>
                        <th>First Name</th>
                        <th>National ID</th>
                        <th>Username</th>
                        <th>Role</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Data will be dynamically populated -->
                </tbody>
            </table>
        </div>
    </div>
</div>













<!-- Change Role Modal -->
<div class="modal fade" id="changeRoleModal" tabindex="-1" aria-labelledby="changeRoleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changeRoleModalLabel">Change User Role</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form to select new role -->
                <form id="changeRoleForm">
                    <!-- Hidden input field to store userId -->
                    <input type="hidden" id="modalUserId" value="">
                    <div class="mb-3">
                        <label for="newRole" class="form-label">New Role:</label>
                        <select class="form-select" id="newRole" name="newRole" required>
                            <option value="CentreSupervisor">Centre Supervisor</option>
                            <option value="SubjectManager">Subject Manager</option>
                            <option value="OfficerSpecialNeeds">Officer  Exams Special Needs</option>
                            <option value="Accounts">Initiator</option>
                            <option value="PeerReviewer">Peer Reviewer</option>
                            <option value="AssistantAccountant">Assistant Accountant</option>
                            <option value="HR">HR</option>
                            <option value="ExamsAdmin">Exams Admin</option>
                            <option value="Admin">Admin</option>
                            <option value="SuperAdmin">S.Admin</option>
                            <option value="HRVerifier">HR Verifier</option>
                            <option value="HRCapturer">HR Capturer</option>
                            <option value="RegionalManager">RegionalManager</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn text-white" style="background-color: #153355;" onclick="submitChangeUserRole()">Change Role</button>
            </div>
        </div>
    </div>
</div>





<script>
    $(document).ready(function () {
        // Set userId when the modal is shown
        $(document).on('click', '[data-bs-target="#changeRoleModal"]', function () {
            var button = $(this); // Button that triggered the modal
            var userId = button.data('userid'); // Extract userId from data-* attributes
            $('#modalUserId').val(userId); // Set userId in the hidden input field
            console.log("User ID set to modal: " + userId); // Debugging
        });
    });

    // Function to submit change user role
    function submitChangeUserRole() {
        var userId = $('#modalUserId').val(); // Get userId from the hidden input field
        var newRole = $('#newRole').val(); // Get the new role from the dropdown
        console.log("Submitting role change for user: " + userId); // Debugging

        // AJAX request to change user role
        $.ajax({
            url: '@Url.Action("ChangeUserRole", "Users")',
            type: 'POST',
            data: { userId: userId, newRole: newRole },
            success: function (result) {
                Swal.fire({
                    icon: 'success',
                    title: 'Role Changed',
                    text: result.message,
                    showConfirmButton: false,
                    timer: 3000 // Close the popup after 3 seconds
                }).then(() => {
                    location.reload(); // Reload the page after the popup closes
                });
            },
            error: function (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Role Change Failed',
                    text: error.responseJSON?.message || 'There was an error changing the role.',
                    showConfirmButton: false,
                    timer: 3000 // Close the popup after 3 seconds
                }).then(() => {
                    location.reload(); // Reload the page after the popup closes
                });
            }
        });
    }

    // Function to refresh the page
    function refreshPage() {
        location.reload();
    }
</script>



<script>
    $(document).ready(function () {
        $('#generateExaminersBtn').click(function () {
            generateExaminers();
        });
    });

    function generateExaminers() {
        $.ajax({
            url: '@Url.Action("GenerateExaminers", "Users")', // Ensure this URL is correct for your setup
            type: 'POST',
            success: function (result) {
                Swal.fire({
                    icon: 'success',
                    title: 'Examiners Generated',
                    text: result.message,
                    showConfirmButton: false,
                    timer: 3000
                }).then(() => {
                    location.reload();
                });
            },
            error: function (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Generation Failed',
                    text: error.responseJSON.message || 'There was an error generating examiners.',
                    showConfirmButton: false,
                    timer: 3000
                }).then(() => {
                    location.reload();
                });
            }
        });
    }
</script>


<script>
    function deleteUser(userId, idNumber, subKey, username, examinerCode) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("Delete", "Users")',
                    type: 'POST',
                    data: {
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                        userId: userId,
                        idNumber: idNumber,
                        subKey: subKey,
                        username: username,
                        examinerCode: examinerCode
                    },
                    success: function (result) {
                        if (result.success) {
                            Swal.fire(
                                'Deleted!',
                                'The user has been deleted.',
                                'success'
                            ).then(() => {
                                location.reload(); // Reload the page to reflect changes
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                result.message,
                                'error'
                            );
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire(
                            'Error!',
                            'An error occurred while deleting the user. Please try again.',
                            'error'
                        );
                    }
                });
            }
        });
    }
</script>


<script>
    function resetPassword(userId) {
        $.ajax({
            url: '@Url.Action("ResetPasswordToDefault", "Users")',
            type: 'POST',
            data: { userId: userId },
            success: function (result) {
                Swal.fire({
                    icon: 'success',
                    title: 'Reset Successful',
                    text: 'Password reset successfully.',
                    showConfirmButton: false,
                    timer: 3000 // Close the popup after 3 seconds
                }).then(() => {
                    location.reload(); // Reload the page after the popup closes
                });
            },
            error: function (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Reset Failed',
                    text: 'There was an error resetting the password.',
                    showConfirmButton: false,
                    timer: 3000 // Close the popup after 3 seconds
                }).then(() => {
                    location.reload(); // Reload the page after the popup closes
                });
            }
        });
    }
</script>


@section Scripts {
    <script>
        $('#usersTable').DataTable({
            "processing": true,
            "serverSide": true,
            "lengthMenu": [
                [10, 25, 50, 100, 250, 500, 1000],
                [10, 25, 50, 100, 250, 500, 1000]
            ],
            "pageLength": 10,
            "dom": '<"row mb-3"<"col-md-4"l><"col-md-4 text-center"B><"col-md-4"f>>' +
                '<t>' +
                '<"row mt-3"<"col-md-6"i><"col-md-6"p>>',
            "buttons": [
                {
                    extend: 'excelHtml5',
                    className: 'btn btn-sm btn-success',
                    text: '<i class="fa fa-file-excel" style="color: #28a745;"></i> Excel'
                },
                {
                    extend: 'csvHtml5',
                    className: 'btn btn-sm btn-info',
                    text: '<i class="fa fa-file-csv" style="color: #17a2b8;"></i> CSV'
                },
                {
                    extend: 'pdfHtml5',
                    className: 'btn btn-sm btn-danger',
                    text: '<i class="fa fa-file-pdf" style="color: #dc3545;"></i> PDF'
                }
            ],

            "ajax": {
                url: "/Users/GetDataa",
                type: "POST" // Use GET since the server-side method is decorated with [HttpGet]
            },
            "columns": [

                { "data": "surname", "name": "Surname", "autoWidth": true },
                { "data": "firstName", "name": "FirstName", "autoWidth": true },

                { "data": "idNumber", "name": "IDNumber", "autoWidth": true },
                { "data": "userName", "name": "UserName", "autoWidth": true },
                { "data": "roles", "name": "Roles", "autoWidth": true },

                {
                    "render": function (data, type, row) {
                        return `
                                                            <div class="btn-group" role="group">
                                            <button class="btn btn-warning btn-sm me-2" style="padding: 2px 5px;" onclick="resetPassword('${row.id}')">
                                                <i class="fa fa-key"></i>
                                                Reset
                                            </button>



                                                                                     <button class="btn btn-secondary btn-sm me-2" style="padding: 2px 5px;" data-bs-toggle="modal" data-bs-target="#changeRoleModal" data-userid="${row.id}">
                    <i class="fa fa-user-cog"></i> Change Role
                </button>
                       <button class="btn btn-secondary btn-sm me-2" style="padding: 2px 5px;" data-bs-toggle="modal" data-bs-target="#updateUsernameModal" data-userid="${row.id}">
                <i class="fa fa-user-cog"></i> Edit
                </button>






                                        </div>
                                    `;
                    }
                }

            ]
        });

    </script>
}

<!-- Update Username Modal -->
<div class="modal fade" id="updateUsernameModal" tabindex="-1" aria-labelledby="updateUsernameModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateUsernameModalLabel">Update Username</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updateUsernameForm">
                    <input type="hidden" id="modalUserId" name="userId">
                    <div class="mb-3">
                        <label for="currentUsername" class="form-label">Current Username</label>
                        <input type="text" class="form-control" id="currentUsername" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="newUsername" class="form-label">New Username</label>
                        <input type="text" class="form-control" id="newUsername" name="newUsername" required>
                        <div class="invalid-feedback">Please enter a valid username</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveUsernameBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // When modal is shown
        $('#updateUsernameModal').on('show.bs.modal', function (event) {
            const button = $(event.relatedTarget);
            const userId = button.data('userid');
            $('#modalUserId').val(userId);

            // Fetch current username
            $.get('@Url.Action("GetCurrentUsername", "Users")', { userId: userId })
                .done(function (data) {
                    $('#currentUsername').val(data.username);
                    $('#newUsername').val('').focus();
                })
                .fail(function () {
                    $('#currentUsername').val('Error loading username');
                    console.error("Failed to fetch current username");
                });
        });

        // Save button click handler
        $('#saveUsernameBtn').click(function () {
            const form = $('#updateUsernameForm');

            // Client-side validation
            if (!form[0].checkValidity()) {
                form.addClass('was-validated');
                return;
            }

            const userId = $('#modalUserId').val();
            const newUsername = $('#newUsername').val().trim();

            $.ajax({
                url: '@Url.Action("UpdateUsername", "Users")',
                type: 'POST',
                data: {
                    userId: userId,
                    newUsername: newUsername
                },
                success: function (response) {
                    $('#updateUsernameModal').modal('hide');
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: response.message,
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload();
                    });
                },
                error: function (xhr) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: xhr.responseJSON?.message || 'Failed to update username',
                        showConfirmButton: true
                    });
                }
            });
        });
    });
</script>

                                                                                  