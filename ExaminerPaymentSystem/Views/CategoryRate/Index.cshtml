@model PaperMarkingRate
@{
    ViewBag.Title = "Category Marking Rate";
}

<style>
    /* Styles from the previous code snippet */
    .form-container {
        max-width: 1200px;
        margin: auto;
        padding: 30px;
        background-color: #f9f9f9;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 25px;
        display: flex;
        align-items: center;
    }

    label {
        font-weight: bold;
        width: 200px;
        margin-right: 20px;
    }

    input[type="text"],
    select {
        flex: 1;
        padding: 10px;
        border: 2px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        width: 200px;
        margin-right: 20px;
    }

    button[type="button"],
    button[type="submit"] {
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        button[type="button"]:hover,
        button[type="submit"]:hover {
            background-color: #153355;
        }

    .separator {
        width: 100%;
        height: 4px;
        background-color: red;
        margin: 30px 0;
    }

    .flex-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }

    .flex-item {
        width: calc(33.33% - 10px);
    }

    .search-button-container {
        display: flex;
        align-items: center;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #ddd;
    }

    #categoryTable {
        display: none;
    }
</style>


@using (Html.BeginForm())
{
    <div class="form-container">
        <h2>Category Marking Rate</h2>

        <div class="separator"></div>

        <div class="form-group">
            @Html.Label("ExaminerCode", "Select Examiner Category: ")
            @Html.DropDownList("ExaminerCode", new SelectList(ViewBag.ExaminerCodes, "EMS_ECT_EXAMINER_CAT_CODE", "ExaminerCaption"), "", new { @class = "form-control", id = "ddlExaminerCatCode" })
            @Html.Label("ExamType", "Select Exam Type: ")
            <select id="ddlExamType" name="ExamType" class="form-control"></select>

        </div>

        <div class="separator"></div>


        <div class="form-group" id="categoryTable">
            <table>
                <thead>
                    <tr>
                        <th>NATIONAL REPORTING ALLOWANCE</th>
                        <th>COORDINATION FEES</th>
                        <th>MODERATION FEES</th>
                        <th>SUPERVISION FEES</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

        <div class="separator"></div>
        <div class="form-group">
            <button type="submit" class="btn text-white" style="background-color: #153355;" onclick=" javascript:validateBeforeSave();" id="saveButton" disabled>
                <i class="fas fa-save mr-2"></i>
                Save
            </button>

        </div>

    </div>
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    var globalexaminercategorycode = null;
    var globalExamType = null;
    $(document).ready(function () {
        $('#ddlExaminerCatCode').change(function () {
            var examinercategorycode = $(this).val();
            globalexaminercategorycode = examinercategorycode;
            //GetSubjectsByExamSession needs to be replaced with the new method: GetExamTypesByExaminerCategory
            //examcode = examinercategorycode
            if (examinercategorycode) {
                $.ajax({
                    url: '@Url.Action("GetExamTypesByExaminerCategoryCode", "CategoryRate")',
                    type: 'GET',
                    data: { examinercategorycode: examinercategorycode },
                    success: function (response) {
                        var jsonData = response;//JSON.stringify(response);
                        //alert(jsonData);
                        var examtypes = [];
                        //alert('subject list declared');
                        for (var i = 0; i < jsonData.length; i++) {
                            var item = jsonData[i];
                            if (item.hasOwnProperty('ppR_EXAM_TYPE')) {
                                examtypes.push(item.ppR_EXAM_TYPE);
                            }
                            else {
                                alert('property not found');
                            }
                        }
                        var uniqueExamTypes = new Set(examtypes);

                        // Convert the Set back to an array
                        examtypes = Array.from(uniqueExamTypes);

                        //alert(examtypes);

                        var dropdown = document.getElementById('ddlExamType');
                        dropdown.innerHTML = "";
                        var option1 = document.createElement('option');
                        option1.text = "Select ExamType";
                        option1.value = "select_examtype";
                        dropdown.appendChild(option1);
                        //alert('default option appended');
                        // examtypes.forEach(function (examtype) {
                        //     //alert('in loop');
                        //     var option = document.createElement('option');
                        //     //alert('option created');
                        //     option.text = examtype;
                        //     //alert('option text added');
                        //     option.value = examtype;
                        //     //alert('option value added')
                        //     dropdown.appendChild(option);
                        //     //alert('value appended');
                        // });
                        examtypes.forEach(function (examtype) {
                            var option = document.createElement('option');
                            option.value = examtype;

                            // Set the text based on the examtype
                            if (examtype === 'E') {
                                option.text = 'Structured';
                            } else if (examtype === 'M') {
                                option.text = 'Multiple choice';
                            } else {
                                option.text = examtype; // Or any default text you want to set
                            }

                            dropdown.appendChild(option);
                        });

                        // $('#categoryTable').hide();
                    }
                });
            }
        });

        $('#ddlExamType').change(function () {
            event.preventDefault();
            //alert("form submission haulted");
            var selectedExamType = $(this).val();
            globalExamType = selectedExamType;
            //alert(selectedExamType);
            if (selectedExamType) {
                //alert("value found");
                //GetPaperCodesBySubject needs to be replaced with the new method: GetCategoryRatesByExamType
                $.ajax({
                    url: '@Url.Action("GetCategoryRatesByExamType", "CategoryRate")',
                    type: 'GET',
                    data: {
                        examtype: selectedExamType,
                        examinercategorycode: globalexaminercategorycode
                    },
                    success: function (response) {
                        const table = document.querySelector('#categoryTable');
                        const tbody = table.querySelector('tbody');
                        // Check if the tbody has rows
                        if (tbody.rows.length > 0) {
                            while (tbody.firstChild) {
                                tbody.removeChild(tbody.firstChild);
                            }
                        }

                        var categoryCodes = response;
                        if (categoryCodes && categoryCodes.length > 0) {
                            $('#categoryTable').show();
                            for (var i = 0; i < categoryCodes.length; i++) {
                                var categorycodes = categoryCodes[i];
                                var newRow = "<tr>" +
                                    "<td>" + '<input type="text" name="PaperMarkingRates" class="form-control" value = "' + categorycodes.naT_REP_ALLOWANCE + '"/>' + "</td>" +
                                    "<td>" + '<input type="text" name="PaperMarkingRates" class="form-control" value = "' + categorycodes.coorD_FEES + '"/>' + "</td>" +
                                    "<td>" + '<input type="text" name="PaperMarkingRates" class="form-control" value = "' + categorycodes.moD_FEES + '"/>' + "</td>" +
                                    "<td>" + '<input type="text" name="PaperMarkingRates" class="form-control" value = "' + categorycodes.supeR_FEES + '"/>' + "</td>" +
                                    "</tr>"
                                $("#categoryTable tbody").append(newRow);
                                $('#saveButton').prop('disabled', false);
                            }
                        } else {
                            var newRow1 = "<tr>" +
                                "<td> No data for this subject</td>" +
                                "</tr>"
                            $("#categoryTable tbody").append(newRow1);
                        }
                    },
                    error: function () {
                        console.log('Error occurred while fetching paper codes');
                    }
                });
            }
        });
    });

    function validateBeforeSave() {
        var ddlExaminerCatCode = document.getElementById("ddlExaminerCatCode").value;
        var ddlExamType = document.getElementById("ddlExamType").value;

        const table = document.querySelector('#categoryTable');

        // Get the tbody element within the table
        const tbody = table.querySelector('tbody');

        // Check if any rows are empty after trimming
        var rowsEmpty = false;
        tbody.querySelectorAll('tr').forEach(row => {
            let isEmpty = !Array.from(row.cells).some(cell => {
                if (cell.querySelector('input')) {
                    const inputValue = cell.querySelector('input').value.trim();
                    if (inputValue === '') {
                        rowsEmpty = true;
                        return true; // Terminate execution when input value is empty
                    }
                } else {
                    const cellContent = cell.textContent.trim();
                    if (cellContent === '') {
                        rowsEmpty = true;
                        return true; // Terminate execution when cell content is empty
                    }
                }
                return false; // Continue checking other cells
            });


        });
        if (rowsEmpty) {
            //alert('Some cells have empty values. Execution terminated.');
            Swal.fire({
                title: "Empty fields!",
                text: "Some cells have empty values. Execution terminated.",
                icon: "error"
            });
            event.preventDefault();
            return;
        } else {
            //alert('all values available.');
            postToController(); // Call postToController function if all values are not empty
        }
    }


    function postToController() {
        event.preventDefault();
        var ddlExaminerCatCode = document.getElementById("ddlExaminerCatCode").value;
        var ddlExamType = document.getElementById("ddlExamType").value;

        // Get the table element
        const table = document.querySelector('#categoryTable');

        // Get the thead and tbody elements within the table
        const thead = table.querySelector('thead');
        const tbody = table.querySelector('tbody');

        // Extract the column headers
        const headers = Array.from(thead.querySelectorAll('th')).map(header => header.textContent.trim());

        // Modify the headers as needed
        // Example: Replace the first header with "Student Name" instead of "Name"
        headers[0] = "NAT_REP_ALLOWANCE";
        headers[1] = "COORD_FEES";
        headers[2] = "MOD_FEES";
        headers[3] = "SUPER_FEES";

        var proceed = true;
        // Extract the cell values and format into JSON
        const tableData = [];
        tbody.querySelectorAll('tr').forEach(row => {
            const rowData = {};
            Array.from(row.cells).forEach((cell, index) => {
                if (cell.querySelector('input')) {
                    if (!isNaN(parseFloat(cell.querySelector('input').value))) {
                        //proceed = false;
                        //alert("value " + cell.querySelector('input').value.trim() + " is not a decimal");
                        //if (isNaN(cell.querySelector('input').value.trim())) {
                        rowData[headers[index]] = cell.querySelector('input').value.trim();
                        proceed = true;
                    }
                    else {
                        // rowData[headers[index]] = cell.querySelector('input').value.trim();
                        // proceed = true;
                        proceed = false;
                        //alert("value " + cell.querySelector('input').value.trim() + " is a decimal");
                    }
                }
                else {
                    rowData[headers[index]] = cell.textContent.trim();
                }
            });
            tableData.push(rowData);
        });

        var newPPR_SUB_SUB_ID = globalexaminercategorycode;
        var newPPR_EXAM_TYPE = globalExamType;

        // Add the values from the select elements to the JSON data
        const jsonData = {
            EMS_ECT_EXAMINER_CAT_CODE: newPPR_SUB_SUB_ID,
            PPR_EXAM_TYPE: newPPR_EXAM_TYPE,
            tableData: tableData
        };

        // Stringify the JSON data
        const jsonString = JSON.stringify(jsonData);
        //alert(jsonString);

        //give me AJAX to save to DB

        //alert(proceed);

        if (proceed) {
            $.ajax({
                url: '@Url.Action("UpdateCategoryMarkingRate", "CategoryRate")',
                type: 'POST',
                contentType: 'application/json',
                data: jsonString, // Ensure that the JSON data is stringified before sending
                success: function (response) {
                    //alert(jsonString);
                    // Check if response has success and message properties
                    if (response.success) {
                        //alert(response.message); // Display the message from the response
                        Swal.fire({
                            title: "Information updated!",
                            text: "Information for category has been successfully updated",
                            icon: "success"
                        });
                    } else {
                        //alert(response.message);
                        Swal.fire({
                            title: "Information not updated!",
                            text: "Information not updated, please try again",
                            icon: "error"
                        });
                    }
                },
                error: function () {
                    //alert("Error occurred while saving data!");
                    Swal.fire({
                        title: "Error!",
                        text: "An error occured whilst servicing request, please try again.",
                        icon: "error"
                    });
                }
            });
        }
        else {
            event.preventDefault();
            Swal.fire({
                title: "input value not allowed!",
                text: "Please ensure that values put are decimal values",
                icon: "error"
            });
            return;
        }

        // AJAX request to save to DB

    }
</script>