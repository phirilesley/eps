@model ExaminerPaymentSystem.Models.Other.SubjectVenue
@inject SignInManager<ApplicationUser> SignInManager
@inject ISubjectsRepository subjectRepo
@inject IExamCodesRepository examCodeRepo
@inject IPaperMarkingRateRepository papercodesRepo
@inject IActivityRepository activityRepo
@inject IVenueRepository venueRepo

@{
    ViewBag.Title = "Manage Subject Venue";
    IEnumerable<Subjects> subjects = await subjectRepo.GetAllPaperCodes();
    IEnumerable<ExamCodes> examCodes = await examCodeRepo.GetAllExamCodes();
    IEnumerable<Venue> venues = await venueRepo.VenuesGetAll();
    var subjectArray = Newtonsoft.Json.JsonConvert.SerializeObject(subjects);
    IEnumerable<Activity> activities = await activityRepo.GetAllActivitiesAsync();
    int currentYear = DateTime.Now.Year;
    int lastYear = currentYear - 1;

    string examCode = ViewBag.SelectedExamCode ?? "";
    string subjectCode = ViewBag.SelectedSubjectCode ?? "";
    string paperCode = ViewBag.SelectedPaperCode ?? "";
    string regionCode = ViewBag.SelectedRegionCode ?? "";

}

<div class="text-center mb-4 mt-4">
    <div class="d-flex align-items-center justify-content-center gap-2">
        <i class="fas fa-marker" style="color: #2a5a8a;"></i>
        <h4 class="fw-bold mb-0" style="color: #153355;">
            Category Check In/Out
        </h4>
    </div>
    <hr style="border-top: 1px solid black;
    width: 100px;
    margin: 8px auto;
    ">
</div>

<div class="container-fluid mt-4">


    <!-- Search Form -->
    <form id="searchForm" method="post" class="needs-validation mb-5" novalidate>
        <div class="border rounded p-4 shadow-sm bg-light">
            <div class="row g-3">
                <!-- Exam Session Filter -->
                <div class="col-md-3">
                    <label for="filterExamCode" class="form-label">Exam Session</label>
                    <select class="form-select" id="filterExamCode" name="examCode" required>
                        <option value="">-- Select Session --</option>
                        @foreach (var examCod in examCodes)
                        {
                            if (int.TryParse(examCod.EXM_EXAM_YEAR, out int examYear))
                            {
                                if (examCod.ACTIVATED_SESSION == "Activated")
                                {
                                    <option value="@examCod.EXM_EXAM_CODE">@examCod.EXM_EXAM_LEVEL @examCod.EXM_EXAM_SESSION @examCod.EXM_EXAM_YEAR</option>
                                }
                            }
                        }
                    </select>
                </div>

                <!-- Subject Code Filter -->
                <div class="col-md-3">
                    <label for="filterSubject" class="form-label">Subject Code</label>
                    <select class="form-select" id="filterSubject" name="subjectCode" required>
                        <option value="">-- Select Subject --</option>
                    </select>
                </div>

                <!-- Paper Code Filter -->
                <div class="col-md-3">
                    <label for="filterPaperCode" class="form-label">Paper Code</label>
                    <select class="form-select" id="filterPaperCode" name="paperCode" required>
                        <option value="">-- Select Paper Code --</option>
                    </select>
                </div>

                <!-- Region Code Filter -->
                <div class="col-md-3">
                    <div class="form-group" id="filterRegionCodeContainer">
                        <label for="filterRegionCode" class="form-label">Region Code</label>
                        <select id="filterRegionCode" name="regionCode" class="form-select">
                            <option value="">-- Select Region Code --</option>
                            <option value="01">01 - Harare</option>
                            <option value="02">02 - Manicaland</option>
                            <option value="03">03 - Mashonaland East</option>
                            <option value="04">04 - Matabeleland North</option>
                            <option value="05">05 - Midlands</option>
                            <option value="06">06 - Masvingo</option>
                            <option value="07">07 - Mashonaland Central</option>
                            <option value="08">08 - Mashonaland West</option>
                            <option value="09">09 - Matabeleland South</option>
                            <option value="10">10 - Bulawayo</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="text-end mt-4">
                <button id="searchButton" class="btn text-white" style="background-color:#153355;" type="submit">
                    <i class="fas fa-search me-2"></i>Search
                </button>
            </div>
        </div>
    </form>

    <!-- Table Container (initially hidden) -->
    <div id="tableContainer" class="card shadow-sm" style="display: none;">
        <div class="card-body">
            <div class="table-responsive">
                <table id="categoryTable" class="table table-striped table-hover w-100">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>SubSub ID</th>
                            <th>Paper Code</th>
                            <th>Region</th>
                            <th>Category</th>
                            <th>Check In</th>
                            <th>Check Out</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data loaded via AJAX -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Your modals remain the same -->
<!-- Add Modal -->
<div class="modal fade" id="addCategoryModal" tabindex="-1" aria-hidden="true">
    <!-- ... (same as before) ... -->
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editCategoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Edit Record</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editCategoryForm">
                <input type="hidden" name="Id" id="editCategoryId">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">SubSub ID *</label>
                        <input type="text" class="form-control" name="SubSubId" id="editSubSubId" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Paper Code *</label>
                        <input type="text" class="form-control" name="PaperCode" id="editPaperCode" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Region</label>
                        <input type="text" class="form-control" name="REGION" id="editRegion">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Category</label>
                        <input type="text" class="form-control" name="Category" id="editCategory">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Check In</label>
                        <input type="datetime-local" class="form-control" name="CheckIn" id="editCheckIn">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Check Out</label>
                        <input type="datetime-local" class="form-control" name="CheckOut" id="editCheckOut">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <span class="spinner-border spinner-border-sm d-none" id="editSpinner"></span>
                        Update
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
                $(document).ready(function () {
            // Initialize DataTable with server-side processing
            var table = $('#categoryTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: '/CheckInCheckOut/GetCategories',
                    type: 'POST',
                    contentType: 'application/json',
                       headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
                   data: function (d) {
                // Only load data when table is visible (after search)
                if (!$('#tableContainer').is(':visible')) {
                    return false;
                }

                // Add search parameters
                d.examCode = $('#filterExamCode').val();
                d.subjectCode = $('#filterSubject').val();
                d.paperCode = $('#filterPaperCode').val();
                d.regionCode = $('#filterRegionCode').val();

                return JSON.stringify(d);
            },
                    error: function(xhr, error, thrown) {
                        console.error('AJAX error:', xhr.responseText);
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            toastr.error(xhr.responseJSON.error);
                        } else {
                            toastr.error('Error loading category data');
                        }
                    }
                },
                columns: [
                    { data: 'id', width: '5%' },
                    { data: 'subSubId', width: '15%' },
                    { data: 'paperCode', width: '15%' },
                    {
                        data: 'region',
                        width: '10%',
                        render: function(data) {
                            return data || 'N/A';
                        }
                    },
                    {
                        data: 'category',
                        width: '15%',
                        render: function(data) {
                            return data || 'N/A';
                        }
                    },
                    {
                        data: 'checkIn',
                        width: '15%',
                        render: function(data) {
                            if (!data) return 'N/A';
                            const date = new Date(data);
                            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
                        }
                    },
                    {
                        data: 'checkOut',
                        width: '15%',
                        render: function(data) {
                            if (!data) return 'N/A';
                            const date = new Date(data);
                            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
                        }
                    },
                    {
                        data: 'id',
                        width: '10%',
                        render: function(data, type, row) {
                            return `
                                <div class="btn-group" role="group">
                                    <button class="btn btn-sm btn-outline-primary edit-btn" data-id="${data}" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger delete-btn" data-id="${data}" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            `;
                        },
                        orderable: false,
                        searchable: false
                    }
                ],
                responsive: true,
                autoWidth: false,
                dom: '<"top"<"row"<"col-md-6"l><"col-md-6"f>>>rt<"bottom"<"row"<"col-md-6"i><"col-md-6"p>>>',
                language: {
                    lengthMenu: "Show _MENU_ records per page",
                    zeroRecords: "No matching records found",
                    info: "Showing _START_ to _END_ of _TOTAL_ records",
                    infoEmpty: "Showing 0 to 0 of 0 records",
                    infoFiltered: "(filtered from _MAX_ total records)",
                    search: "_INPUT_",
                    searchPlaceholder: "Search...",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                },
                initComplete: function() {
                    // Add custom filter dropdowns if needed
                    this.api().columns([3,4]).every(function() {
                        var column = this;
                        var select = $('<select class="form-select form-select-sm"><option value="">All</option></select>')
                            .appendTo($(column.header()))
                            .on('change', function() {
                                var val = $.fn.dataTable.util.escapeRegex($(this).val());
                                column.search(val ? '^' + val + '$' : '', true, false).draw();
                            });

                        column.data().unique().sort().each(function(d) {
                            if (d) select.append('<option value="' + d + '">' + d + '</option>');
                        });
                    });
                }
            });

                 $('#searchForm').submit(function(e) {
            e.preventDefault();

            // Show the table container
            $('#tableContainer').show();

            // Reload DataTable with search parameters
            table.ajax.reload();

            return false;
        });

            // Edit Record Handler
            $(document).on('click', '.edit-btn', function() {
                var id = $(this).data('id');
                var $modal = $('#editCategoryModal');

                // Show loading state
                $modal.find('.modal-body').addClass('loading');
                $modal.modal('show');

                $.get('/CheckInCheckOut/Get/' + id)
                    .done(function(data) {
                        // Populate form
                        $modal.find('#editCategoryId').val(data.id);
                        $modal.find('#editSubSubId').val(data.subSubId);
                        $modal.find('#editPaperCode').val(data.paperCode);
                        $modal.find('#editRegion').val(data.region || '');
                        $modal.find('#editCategory').val(data.category || '');

                        // Format dates for datetime-local inputs
                        if (data.checkIn) {
                            var checkInDate = new Date(data.checkIn);
                            $modal.find('#editCheckIn').val(checkInDate.toISOString().slice(0, 16));
                        }
                        if (data.checkOut) {
                            var checkOutDate = new Date(data.checkOut);
                            $modal.find('#editCheckOut').val(checkOutDate.toISOString().slice(0, 16));
                        }
                    })
                    .fail(function(xhr) {
                        toastr.error(xhr.responseJSON?.error || 'Failed to load record');
                        $modal.modal('hide');
                    })
                    .always(function() {
                        $modal.find('.modal-body').removeClass('loading');
                    });
            });

            // Edit Form Submission
            $('#editCategoryForm').submit(function(e) {
                e.preventDefault();
                var $form = $(this);
                var $submitBtn = $form.find('button[type="submit"]');
                var $spinner = $submitBtn.find('.spinner-border');

                $submitBtn.prop('disabled', true);
                $spinner.removeClass('d-none');

                $.ajax({
                    url: '/CheckInCheckOut/Edit',
                    type: 'POST',
                    data: $form.serialize(),
                    success: function() {
                        $('#editCategoryModal').modal('hide');
                        table.ajax.reload(null, false); // Reload without resetting paging
                        toastr.success('Record updated successfully');
                    },
                    error: function(xhr) {
                        if (xhr.responseJSON && xhr.responseJSON.errors) {
                            // Handle validation errors
                            $.each(xhr.responseJSON.errors, function(key, value) {
                                toastr.error(value);
                            });
                        } else {
                            toastr.error(xhr.responseJSON?.error || 'Error updating record');
                        }
                    },
                    complete: function() {
                        $submitBtn.prop('disabled', false);
                        $spinner.addClass('d-none');
                    }
                });
            });

            // Delete Record Handler
            $(document).on('click', '.delete-btn', function() {
                var id = $(this).data('id');
                var $deleteModal = $('#deleteModal');

                $deleteModal.find('#deleteCategoryId').val(id);
                $deleteModal.modal('show');
            });

            // Confirm Delete
            $('#confirmDelete').click(function() {
                var $btn = $(this);
                var id = $('#deleteCategoryId').val();

                $btn.prop('disabled', true);
                $btn.find('.spinner-border').removeClass('d-none');

                $.ajax({
                    url: '/CheckInCheckOut/Delete/' + id,
                    type: 'POST',
                    success: function() {
                        $('#deleteModal').modal('hide');
                        table.ajax.reload(null, false);
                        toastr.success('Record deleted successfully');
                    },
                    error: function(xhr) {
                        toastr.error(xhr.responseJSON?.error || 'Error deleting record');
                    },
                    complete: function() {
                        $btn.prop('disabled', false);
                        $btn.find('.spinner-border').addClass('d-none');
                    }
                });
            });

            // Reset forms when modals are closed
            $('.modal').on('hidden.bs.modal', function() {
                $(this).find('form').trigger('reset');
                $(this).find('.is-invalid').removeClass('is-invalid');
                $(this).find('.invalid-feedback').remove();
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            var subjects = @Html.Raw(subjectArray);

            // Function to populate subject dropdown based on selected exam code
            $('#filterExamCode').change(function () {
                var selectedExamCode = $(this).val();
                var subjectSelect = $('#filterSubject');
                subjectSelect.empty().append($('<option></option>').attr('value', '').text('-- Select Subject --'));

                // Filter subjects based on selected exam code and remove duplicates
                var uniqueSubjects = {};
                subjects.forEach(function (subject) {
                    var subSubIdPrefix = subject.SUB_SUB_ID.substring(0, 3);
                    if (subSubIdPrefix === selectedExamCode) {
                        uniqueSubjects[subject.SUB_SUB_ID] = subject.SUB_SUBJECT_DESC;
                    }
                });

                // Populate subject dropdown with unique subjects
                Object.keys(uniqueSubjects).forEach(function (key) {
                    var optionText = key.substring(key.length - 4) + '-' + uniqueSubjects[key];
                    subjectSelect.append($('<option></option>').attr('value', key).text(optionText));
                    console.log("Appended subject: " + key);
                });
            });

            // Function to populate paper code dropdown based on selected subject
            $('#filterSubject').change(function () {
                var selectedSubjectId = $(this).val();
                var paperCodeSelect = $('#filterPaperCode');
                paperCodeSelect.empty().append($('<option></option>').attr('value', '').text('-- Select Paper Code --'));

                if (selectedSubjectId && selectedSubjectId.length >= 4) {
                    var subjectCheck = selectedSubjectId.substring(3, 4);


                    if (subjectCheck === '7') {
                        $('#filterRegionCodeContainer').show();
                        $('#filterRegionCode').attr('required', 'required');
                    } else {

                        $('#filterRegionCodeContainer').hide();
                        $('#filterRegionCode').removeAttr('required');
                    }
                } else {
                    $('#filterRegionCodeContainer').hide();
                    $('#filterRegionCode').removeAttr('required');
                }

                if (selectedSubjectId) {
                    // Make an AJAX call to get the paper codes
                    $.ajax({
                        url: '@Url.Action("GetPaperCodes", "Subjects")',
                        type: 'GET',
                        data: { subjectCode: selectedSubjectId },
                        success: function (data) {
                            data.forEach(function (paperCode) {
                                paperCodeSelect.append($('<option></option>').attr('value', paperCode.ppR_PAPER_CODE).text(paperCode.ppR_PAPER_CODE));

                            });
                        },
                        error: function (xhr, status, error) {
                            console.error("Error fetching paper codes: " + error);
                        }
                    });
                }
            });
        });
    </script>
}
