@*
    Removed the problematic @inject directive that was causing the syntax error
    Added proper model directive if needed for strongly-typed views
*@
@{
    ViewData["Title"] = "Exam Phases";
}
<link href="/css/monitorlist.css" rel="stylesheet" />
<style>
    .badge.bg-pink {
        background-color: #ff69b4;
        color: white;
    }

    .btn-sm .fa-icon {
        font-size: 0.9em;
        line-height: 1;
        vertical-align: middle;
    }

    .display-6 {
        font-size: 1.5rem;
    }
    /* Make Select2 match Bootstrap form control height */
    .select2-container .select2-selection--single {
        height: 38px !important;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.5;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 36px !important;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        line-height: 24px !important;
    }

    .btn-custom {
        background-color: #153355;
        color: white;
        border: 1px solid #153355;
    }

        .btn-custom:hover {
            background-color: #0f2642;
            border-color: #0f2642;
            color: white;
        }

    .btn-outline-custom {
        color: #153355;
        border-color: #153355;
        background-color: transparent;
    }

        .btn-outline-custom:hover {
            color: white;
            background-color: #153355;
            border-color: #153355;
        }


</style>

<div class="container-fluid px-4 mt-3">
    <!-- Header Section -->
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mb-2">
        <div>
            <div class="header-container mb-4">
                <h5 class="display-6 fw-bold text-gradient mb-1">
                    @ViewData["Title"]
                </h5>
                <div class="accent-line"></div>
            </div>
        </div>
        <div class="mt-3 mt-md-0">
            <button id="addPhaseBtn" class="btn text-white" style="background-color:#153355;" data-bs-toggle="modal" data-bs-target="#addPhaseModal">
                <i class="fas fa-plus me-2"></i>Add Phase
            </button>
        </div>
    </div>

    <!-- Filters Card -->
    <div class="card border-0 shadow-sm mb-2 p-2">
        <div class="card-body">
            <div class="row g-3">
                <!-- Session Filter -->
                <div class="col-md-2">
                    <label for="sessionFilter" class="form-label">Session</label>
                    <select id="sessionFilter" class="form-select">
                        <option value="">All Sessions</option>
                        @if (ViewBag.Sessions != null)
                        {
                            @foreach (var session in ViewBag.Sessions)
                            {
                                <option value="@session.Value">@session.Text</option>
                            }
                        }
                        else
                        {
                            <option value="" disabled>No sessions available</option>
                        }
                    </select>
                </div>

                <!-- Reset Button -->
                <div class="col-md-2 d-flex align-items-end">
                    <button id="resetFiltersBtn" class="btn btn-outline-secondary w-100">
                        <i class="fas fa-undo me-2"></i>Reset Filters
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Table Card -->
    <div class="card border-0 shadow-sm p-2">
        <div id="phaseDataContainer">
            <table id="phasesTable" class="table table-striped" style="width:100%;">
                <thead>
                    <tr>
                        <th>Phase Code</th>
                        <th>Phase Name</th>
                        <th>Session</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Data will be inserted here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Edit Phase Modal -->
    <div class="modal fade" id="editPhaseModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header text-white" style="background-color:#153355;">
                    <h5 class="modal-title">Edit Phase</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editPhaseForm">
                        <input type="hidden" id="editPhaseCode">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="editPhaseName" class="form-label">Phase Name</label>
                                <input type="text" class="form-control" id="editPhaseName" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editSessionCode" class="form-label">Session</label>
                                <select class="form-select" id="editSessionCode" required>
                                    <option value="">Select Session</option>
                                    @if (ViewBag.Sessions != null)
                                    {
                                        foreach (var session in ViewBag.Sessions)
                                        {
                                            <option value="@session.Value">@session.Text</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="" disabled>No sessions available</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="editStartDate" class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="editStartDate" required>
                            </div>
                            <div class="col-md-4">
                                <label for="editEndDate" class="form-label">End Date</label>
                                <input type="date" class="form-control" id="editEndDate" required>
                            </div>
                            <div class="col-md-4">
                                <label for="editYear" class="form-label">Year</label>
                                <input type="text" class="form-control" id="editYear" required>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="saveEditBtn" class="btn text-white" style="background-color:#153355;">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Stipend Configuration Modal -->
    <div class="modal fade" id="editPhaseStipendModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header text-white" style="background-color:#153355;">
                    <h5 class="modal-title">Stipend Rates Configuration</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editPhaseStipendForm">
                        <input type="hidden" id="editStipendPhaseCode" name="PhaseCode">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="clusterManagerRate" class="form-label">Cluster Manager Rate ($)*</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control" id="clusterManagerRate"
                                               name="ClusterManagerRate" step="0.01" min="0" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="assistantClusterManagerRate" class="form-label">Assistant Cluster Manager Rate ($)*</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control" id="assistantClusterManagerRate"
                                               name="AssistantClusterManagerRate" step="0.01" min="0" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="residentMonitorRate" class="form-label">Resident Monitor Rate ($)*</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control" id="residentMonitorStipendRate"
                                               name="ResidentMonitorRate" step="0.01" min="0" required>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="saveEditStipendBtn" class="btn text-white" style="background-color:#153355;">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Daily Rates Modal -->
    <div class="modal fade" id="phaseDailyRatesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header text-white" style="background-color:#153355;">
                    <h5 class="modal-title">Daily Rates Configuration</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="dailyRatesForm">
                        <input type="hidden" id="dailyRatePhaseCode" name="PhaseCode">
                        <div class="row g-3">
                        
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label for="accomodationRate" class="form-label">Accommodation Rate ($)*</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control"
                                               id="accomodationRate" name="AccomodationRate"
                                               step="0.01" min="0" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 mt-3">
                                <h5 class="border-bottom pb-2">Meal Rates</h5>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="breakFastRate" class="form-label">Breakfast ($)*</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control"
                                               id="breakFastRate" name="BreakFastRate"
                                               step="0.01" min="0" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="lunchRate" class="form-label">Lunch ($)*</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control"
                                               id="lunchRate" name="LunchRate"
                                               step="0.01" min="0" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="dinnerRate" class="form-label">Dinner ($)*</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control"
                                               id="dinnerRate" name="DinnerRate"
                                               step="0.01" min="0" required>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="saveDailyRatesBtn" class="btn text-white" style="background-color:#153355;">
                        Save Daily Rates
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Phase Modal -->
    <div class="modal fade" id="addPhaseModal" tabindex="-1" aria-labelledby="addPhaseModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header text-white" style="background-color:#153355;">
                    <h5 class="modal-title" id="addPhaseModalLabel">
                        <i class="fas fa-user-plus me-2"></i>Add New Phase
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addPhaseForm">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="phaseCode" class="form-label">Phase Code*</label>
                                    <input type="text" class="form-control form-control-lg" id="phaseCode" name="phaseCode" required>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="phaseName" class="form-label">Phase Name*</label>
                                    <input type="text" class="form-control form-control-lg" id="phaseName" name="phaseName" required>
                                </div>
                            </div>
                            <div class="col-md-4"></div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="sessionCode" class="form-label">Session*</label>
                                    <select class="form-select form-select-lg" id="sessionCode" name="sessionCode" required>
                                        <option value="">Select Session</option>
                                        @if (ViewBag.Sessions != null)
                                        {
                                            foreach (var session in ViewBag.Sessions)
                                            {
                                                <option value="@session.Value">@session.Text</option>
                                            }
                                        }
                                        else
                                        {
                                            <option value="" disabled>No sessions available</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label for="startDate" class="form-label">Start Date*</label>
                                    <input type="date" class="form-control form-control-lg" id="startDate" name="startDate" required>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label for="endDate" class="form-label">End Date*</label>
                                    <input type="date" class="form-control form-control-lg" id="endDate" name="endDate" required>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-lg" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="button" id="savePhaseBtn" class="btn text-white btn-lg" style="background-color:#153355;">
                        <i class="fas fa-save me-2"></i>Save Phase
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            console.log("Starting data load...");

            // Initialize DataTable
            var table = $('#phasesTable').DataTable({
                paging: true,
                searching: true,
                ordering: true,
                info: true,
                responsive: true,
                serverSide: false,
                language: {
                    emptyTable: "No records found"
                }
            });

            var currentFilters = {
                sessionFilter: ''
            };

            // Load data initially
            loadAndRenderTable();

            function loadAndRenderTable() {
                console.log("Loading phase data with filters:", currentFilters);
                currentFilters.sessionFilter = $('#sessionFilter').val();

                $.ajax({
                    url: '/Phases/GetPhases',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(currentFilters),
                    success: function(response) {
                        console.log("Data received:", response);
                        var data = response.data || response;

                        if (!Array.isArray(data)) {
                            console.error("Data is not an array:", data);
                            return;
                        }

                        table.clear();
                        data.forEach(function(item) {
                            table.row.add([
                                item.phaseCode || '-',
                                item.phaseName || '-',
                                item.sessionCode || '-',
                                item.startTime || '-',
                                item.endTime || '-',
                                `<div class="form-check form-switch d-flex justify-content-center">
                                    <input class="form-check-input status-toggle" type="checkbox"
                                           data-id="${item.phaseCode || ''}"
                                           ${item.status === 'Active' ? 'checked' : ''}>
                                </div>`,
                                `<div class="d-flex flex-nowrap gap-2">
                                    <button class="btn btn-sm text-white set-stipend-btn px-3 py-1 d-flex align-items-center"
                                           style="background-color:#153355;" data-id="${item.phaseCode || ''}">
                                        <i class="fas fa-money-bill-wave me-2"></i>
                                        <span>Stipend</span>
                                    </button>
                                    <button class="btn btn-sm text-white set-daily-rates-btn px-3 py-1 d-flex align-items-center"
                                           style="background-color:#1e5631;" data-id="${item.phaseCode || ''}">
                                        <i class="fas fa-utensils me-2"></i>
                                        <span>Rates</span>
                                    </button>
                                    <button class="btn btn-sm text-white edit-btn px-3 py-1 d-flex align-items-center"
                                           style="background-color:#153355;" data-id="${item.phaseCode || ''}">
                                        <i class="fas fa-edit me-2"></i>
                                        <span>Edit</span>
                                    </button>
                                    <button class="btn btn-sm btn-danger delete-btn px-3 py-1 d-flex align-items-center"
                                            data-id="${item.phaseCode || ''}">
                                        <i class="fas fa-trash-alt me-2"></i>
                                        <span>Remove</span>
                                    </button>
                                </div>`
                            ]);
                        });
                        table.draw();
                    },
                    error: function(xhr) {
                        console.error("Failed to load data:", xhr.responseText);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to load phase data',
                            confirmButtonColor: '#153355'
                        });
                    }
                });
            }

            // Filter handlers
            function applyFilters() {
                currentFilters = {
                    sessionFilter: $('#sessionFilter').val()
                };
                loadAndRenderTable();
            }

            $('#sessionFilter').on('change', applyFilters);

            $('#resetFiltersBtn').on('click', function() {
                $('#sessionFilter').val('').trigger('change');
                currentFilters = {
                    sessionFilter: ''
                };
                loadAndRenderTable();
            });



                 $(document).on('change', '.status-toggle', function () {
            const $toggle = $(this); // keep reference to checkbox
            const phaseCode = $toggle.data('id');
            const isActive = $toggle.is(':checked');
            const newStatus = isActive ? 'Active' : 'Inactive';

            Swal.fire({
                title: 'Updating Status...',
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading()
            });

            $.ajax({
                url: '/Phases/UpdatePhaseStatus',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify({
                    phaseCode: phaseCode,
                    status: newStatus
                }),
                success: function (response) {
                    Swal.close();
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Status Updated',
                            text: `Phase is now ${newStatus}`,
                            confirmButtonColor: '#153355',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        // Revert toggle
                        $toggle.prop('checked', !isActive);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message || 'Failed to update status',
                            confirmButtonColor: '#153355'
                        });
                    }
                },
                error: function (xhr) {
                    // Revert toggle
                    $toggle.prop('checked', !isActive);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: xhr.responseJSON?.message || 'Error updating status',
                        confirmButtonColor: '#153355'
                    });
                }
            });
        });

            // Edit button handler
            $(document).on('click', '.edit-btn', function(e) {
                e.preventDefault();
                var phaseCode = $(this).data('id');

                Swal.fire({
                    title: 'Loading...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                $.get('/Phases/GetPhase', { phaseCode: phaseCode })
                    .done(function(data) {
                        Swal.close();
                        $('#editPhaseCode').val(data.phaseCode || data.PhaseCode);
                        $('#editPhaseName').val(data.phaseName || data.PhaseName);
                        $('#editStartDate').val(data.startTime || data.StartTime);
                        $('#editEndDate').val(data.endTime || data.EndTime);
                         $('#editYear').val(data.phaseYear || data.PhaseYear);
                        $('#editSessionCode').val(data.sessionCode || data.SessionCode);
                        $('#editPhaseModal').modal('show');
                    })
                    .fail(function(xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: xhr.status === 404 ? 'Phase not found' : 'Error loading phase data',
                            confirmButtonColor: '#153355'
                        });
                    });
            });

            // Save edit handler
            $('#saveEditBtn').click(function() {
                Swal.fire({
                    title: 'Saving Changes...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                $.ajax({
                    url: '/Phases/UpdatePhase',
                    type: 'POST',
                    data: {
                        PhaseCode: $('#editPhaseCode').val(),
                        PhaseName: $('#editPhaseName').val(),
                        StartTime: $('#editStartDate').val(),
                        EndTime: $('#editEndDate').val(),
                        PhaseYear: $('#editYear').val(),
                        SessionCode: $('#editSessionCode').val()
                    },
                    success: function(response) {
                        Swal.close();
                        if (response && response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: response.message,
                                confirmButtonColor: '#153355'
                            });
                            $('#editPhaseModal').modal('hide');
                            loadAndRenderTable();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: (response && response.message) || 'Unknown error occurred',
                                confirmButtonColor: '#153355'
                            });
                        }
                    },
                    error: function(xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: (xhr.responseJSON && xhr.responseJSON.message) || 'Error updating phase',
                            confirmButtonColor: '#153355'
                        });
                    }
                });
            });

            // Set Stipend button handler
            $(document).on('click', '.set-stipend-btn', function(e) {
                e.preventDefault();
                var phaseCode = $(this).data('id');

                Swal.fire({
                    title: 'Loading stipend rates...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                $.get('/Phases/GetPhaseStipend', { phaseCode: phaseCode })
                    .done(function(data) {
                        Swal.close();
                        $('#editStipendPhaseCode').val(phaseCode);
                        $('#clusterManagerRate').val(data.clusterManagerRate || data.ClusterManagerRate || '0.00');
                        $('#assistantClusterManagerRate').val(data.assistantClusterManagerRate || data.AssistantClusterManagerRate || '0.00');
                        $('#residentMonitorStipendRate').val(data.residentMonitorRate || data.ResidentMonitorRate || '0.00');
                        $('#editPhaseStipendModal').modal('show');
                    })
                    .fail(function(xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Error loading stipend rates',
                            confirmButtonColor: '#153355'
                        });
                    });
            });

            // Save Stipend Changes handler
            $('#saveEditStipendBtn').click(function() {
                Swal.fire({
                    title: 'Saving Stipend Rates...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                $.ajax({
                    url: '/Phases/UpdateStipendRate',
                    type: 'POST',
                    data: {
                        PhaseCode: $('#editStipendPhaseCode').val(),
                        ClusterManagerRate: $('#clusterManagerRate').val(),
                        AssistantClusterManagerRate: $('#assistantClusterManagerRate').val(),
                        ResidentMonitorRate: $('#residentMonitorStipendRate').val()
                    },
                    success: function(response) {
                        Swal.close();
                        if (response && response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: response.message,
                                confirmButtonColor: '#153355'
                            });
                            $('#editPhaseStipendModal').modal('hide');
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: (response && response.message) || 'Unknown error occurred',
                                confirmButtonColor: '#153355'
                            });
                        }
                    },
                    error: function(xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: (xhr.responseJSON && xhr.responseJSON.message) || 'Error updating stipend rates',
                            confirmButtonColor: '#153355'
                        });
                    }
                });
            });

            // Set Daily Rates button handler
            $(document).on('click', '.set-daily-rates-btn', function(e) {
                e.preventDefault();
                var phaseCode = $(this).data('id');

                Swal.fire({
                    title: 'Loading daily rates...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                $.get('/Phases/GetPhaseDailyRates', { phaseCode: phaseCode })
                    .done(function(data) {
                        Swal.close();
                        $('#dailyRatePhaseCode').val(phaseCode);
                   
                        $('#dinnerRate').val(data.dinnerRate || data.DinnerRate || '0.00');
                        $('#accomodationRate').val(data.accomodationRate || data.AccomodationRate || '0.00');
                        $('#lunchRate').val(data.lunchRate || data.LunchRate || '0.00');
                        $('#breakFastRate').val(data.breakFastRate || data.BreakFastRate || '0.00');
                        $('#phaseDailyRatesModal').modal('show');
                    })
                    .fail(function(xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Error loading daily rates',
                            confirmButtonColor: '#153355'
                        });
                    });
            });

            // Save Daily Rates handler
            $('#saveDailyRatesBtn').click(function() {
                Swal.fire({
                    title: 'Saving Daily Rates...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                $.ajax({
                    url: '/Phases/UpdatePhaseDailyRates',
                    type: 'POST',
                    data: {
                        PhaseCode: $('#dailyRatePhaseCode').val(),
                        ResidentMonitorRate: $('#residentMonitorDailyRate').val(),
                        DinnerRate: $('#dinnerRate').val(),
                        AccomodationRate: $('#accomodationRate').val(),
                        LunchRate: $('#lunchRate').val(),
                        BreakFastRate: $('#breakFastRate').val()
                    },
                    success: function(response) {
                        Swal.close();
                        if (response && response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: response.message,
                                confirmButtonColor: '#153355'
                            });
                            $('#phaseDailyRatesModal').modal('hide');
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: (response && response.message) || 'Unknown error occurred',
                                confirmButtonColor: '#153355'
                            });
                        }
                    },
                    error: function(xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: (xhr.responseJSON && xhr.responseJSON.message) || 'Error updating daily rates',
                            confirmButtonColor: '#153355'
                        });
                    }
                });
            });

            // Delete button handler
            $(document).on('click', '.delete-btn', function(e) {
                e.preventDefault();
                var phaseCode = $(this).data('id');

                Swal.fire({
                    title: 'Confirm Delete',
                    text: 'Are you sure you want to delete this phase?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Delete',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            title: 'Deleting...',
                            allowOutsideClick: false,
                            didOpen: () => Swal.showLoading()
                        });

                        $.ajax({
                            url: '/Phases/DeletePhase',
                            type: 'POST',
                            data: { phaseCode: phaseCode },
                            success: function(response) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted',
                                    text: response.message || 'Phase deleted successfully',
                                    confirmButtonColor: '#153355'
                                });
                                loadAndRenderTable();
                            },
                            error: function(xhr) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: xhr.responseJSON?.message || 'Error deleting phase',
                                    confirmButtonColor: '#153355'
                                });
                            }
                        });
                    }
                });
            });

                 $('#addPhaseBtn').click(function() {
            $('#addPhaseModal').modal('show');
        });

        // Handle form submission for adding a new phase
        $('#savePhaseBtn').click(function() {
            // Validate form
            if (!$('#addPhaseForm')[0].checkValidity()) {
                $('#addPhaseForm')[0].reportValidity();
                return;
            }

            // Show loading state
            Swal.fire({
                title: 'Saving...',
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading()
            });

            // Create Date objects with proper time
            const startDate = new Date($('#startDate').val());
            startDate.setHours(0, 0, 0, 0);

            const endDate = new Date($('#endDate').val());
            endDate.setHours(23, 59, 59, 999);

            // Collect form data with correct property names that match the C# model
            var formData = {
                PhaseCode: $('#phaseCode').val(),        // Changed to match C# property
                PhaseName: $('#phaseName').val(),        // Changed to match C# property
                StartTime: startDate.toISOString(),      // Changed to match C# property + formatted
                EndTime: endDate.toISOString(),          // Changed to match C# property + formatted
                SessionCode: $('#sessionCode').val(),    // Changed to match C# property
                // Add default values for other required properties
                Rate: 0,
                ClusterManagerRate: 0,
                AssistantClusterManagerRate: 0,
                ResidentMonitorRate: 0,
                DinnerRate: 0,
                AccomodationRate: 0,
                LunchRate: 0,
                BreakFastRate: 0,
                LevelCode: "0",
                PhaseYear: new Date().getFullYear().toString(),
                Status: "Inactive"
            };

            // Submit via AJAX
            $.ajax({
                url: '/Phases/Create',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    Swal.close();
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Phase added successfully',
                            confirmButtonColor: '#153355'
                        });
                        $('#addPhaseModal').modal('hide');
                        $('#addPhaseForm')[0].reset();
                        loadAndRenderTable();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message || 'Failed to add phase',
                            confirmButtonColor: '#153355'
                        });
                    }
                },
                error: function(xhr) {
                    Swal.close();
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: xhr.responseJSON?.message || 'An error occurred',
                        confirmButtonColor: '#153355'
                    });
                }
            });
        });
        });
    </script>
}