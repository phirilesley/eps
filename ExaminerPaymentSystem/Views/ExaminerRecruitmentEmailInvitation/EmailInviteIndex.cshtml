@model IEnumerable<ExaminerRecruitmentEmailInvitation>

@{
    ViewData["Title"] = "Examiner Recruitment Email Invitations";
}

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- DataTables -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<h1>@ViewData["Title"]</h1>

<!-- Bulk Delete, Total Records, and Download Buttons -->
<div class="row shadow p-4 rounded mb-3">
    <div class="col-12 col-md-3">
        <button id="bulkDeleteInvitations" class="btn btn-danger"> <i class="bi bi-trash"></i> Bulk Delete Selected</button>
    </div>

    <div class="col-12 col-md-3">
        <span class="btn btn-outline-primary" id="downloadExcel">
            <i class="bi bi-file-earmark-excel"></i> Download Excel
        </span>
    </div>
    <div class="col-12 col-md-3">
        <span class="btn btn-outline-success" id="downloadPdf">
            <i class="bi bi-filetype-pdf"></i> Download PDF</span>
    </div>
    <div class="col-12 col-md-3">
        <span class="btn btn-outline-warning">
            <i class="bi bi-file-earmark-ppt"></i> Total Records: <span id="grandTotalInvites">0</span>
        </span>
    </div>
</div>

<!-- Table -->
<div class="table-responsive">
    <table id="invitationsTable" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll" /></th>
                <th>Examiner Name</th>
                <th>Last Name</th>
                <th>Level</th>
                <th>Subject</th>
                <th>Paper Code</th>
                <th>Region</th>
                <th>Invited By</th>
                <th>Date Invited</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#invitationsTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: '/ExaminerRecruitmentEmailInvitation/GetData',
                    type: 'GET',
                    data: function (d) {
                        d.region = '@ViewBag.Region';
                        d.subject = '@ViewBag.Subject';
                        d.paperCode = '@ViewBag.PaperCode';
                        d.experience = '@ViewBag.Experience';
                    },
                    error: function (xhr, error, thrown) {
                        let errorMessage = `Error: ${xhr.status} ${xhr.statusText}`;
                        try {
                            const response = JSON.parse(xhr.responseText);
                            if (response && response.message) {
                                errorMessage = response.message;
                            } else if (xhr.responseText) {
                                errorMessage = xhr.responseText;
                            }
                        } catch (e) {
                            if (xhr.responseText) {
                                errorMessage = xhr.responseText;
                            }
                        }

                        Swal.fire({
                            icon: 'error',
                            title: 'Server Error',
                            html: `<pre>${errorMessage}</pre>`,
                            confirmButtonText: 'OK'
                        });
                    }
                },
                columns: [
                    {
                        data: 'id',
                        orderable: false,
                        render: function (data) {
                            return `<input type="checkbox" class="selectRow" value="${data}" />`;
                        }
                    },
                    { data: 'examinerName' },
                    { data: 'lastName' },
                    { data: 'level' },
                    { data: 'subject' },
                    { data: 'paperCode' },
                    { data: 'region' },
                    { data: 'invitedBy' },
                    { data: 'dateInvited' },
                    {
                        data: 'id',
                        orderable: false,
                        render: function (data) {
                            return `<button class="btn btn-danger btn-sm delete-btn" data-id="${data}">
                                                <span class="btn-text">Delete</span>
                                                <i class="fas fa-spinner fa-spin d-none"></i>
                                            </button>`;
                        }
                    }
                ],
                columnDefs: [
                    { targets: [0, 9], searchable: false }
                ],
                drawCallback: function (settings) {
                    // Update total records count
                    var json = settings.json;
                    if (json) {
                        $('#grandTotalInvites').text(json.recordsTotal);
                    }
                }
            });

            $('#selectAll').on('click', function () {
                $('.selectRow').prop('checked', this.checked);
            });

            $(document).on('click', '.selectRow', function () {
                $('#selectAll').prop('checked', $('.selectRow:checked').length === $('.selectRow').length);
            });

            $(document).on('click', '.delete-btn', function () {
                var $button = $(this);
                var id = $button.data('id');

                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to delete this invitation?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $button.prop('disabled', true);
                        $button.find('.btn-text').text('Deleting...');
                        $button.find('.fa-spinner').removeClass('d-none');

                        $.ajax({
                            url: '/ExaminerRecruitmentEmailInvitation/Delete',
                            type: 'POST',
                            data: { id: id },
                            success: function (data) {
                                if (data.success) {
                                    Swal.fire('Deleted!', data.message, 'success');
                                    table.row($button.closest('tr')).remove().draw();
                                } else {
                                    Swal.fire('Error!', data.message, 'error');
                                }
                            },
                            error: function (xhr) {
                                Swal.fire('Error', xhr.responseText || 'An error occurred.', 'error');
                            },
                            complete: function () {
                                $button.prop('disabled', false);
                                $button.find('.btn-text').text('Delete');
                                $button.find('.fa-spinner').addClass('d-none');
                            }
                        });
                    }
                });
            });

            $('#bulkDeleteInvitations').on('click', function () {
                var selectedIds = $('.selectRow:checked').map(function () {
                    return parseInt($(this).val());
                }).get();

                if (selectedIds.length === 0) {
                    Swal.fire('No Selection', 'Please select at least one invitation to delete.', 'warning');
                    return;
                }

                Swal.fire({
                    title: 'Are you sure?',
                    text: `Delete ${selectedIds.length} selected invitation(s)?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        var $button = $(this);
                        $button.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Deleting...');

                        $.ajax({
                            url: '/ExaminerRecruitmentEmailInvitation/BulkDelete',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(selectedIds),
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function (data) {
                                if (data.success) {
                                    Swal.fire('Deleted!', data.message, 'success').then(() => {
                                        selectedIds.forEach(function (id) {
                                            var row = $(`input[value="${id}"]`).closest('tr');
                                            table.row(row).remove();
                                        });
                                        table.draw();
                                    });
                                } else {
                                    Swal.fire('Error!', data.message, 'error');
                                }
                            },
                            error: function (xhr) {
                                Swal.fire('Error', xhr.responseText || 'An error occurred.', 'error');
                            },
                            complete: function () {
                                $button.prop('disabled', false).html('Bulk Delete Selected');
                            }
                        });
                    }
                });
            });

            // Download Excel
            $('#downloadExcel').on('click', async function (e) {
                e.preventDefault();
                const filters = {
                    region: '@ViewBag.Region',
                    subject: '@ViewBag.Subject',
                    paperCode: '@ViewBag.PaperCode',
                    experience: '@ViewBag.Experience',
                    searchValue: table.search(),
                    format: 'excel'
                };

                // Show spinner
                Swal.fire({
                    title: 'Downloading...',
                    text: 'Please wait while your Excel file is being generated.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    const response = await fetch('/ExaminerRecruitmentEmailInvitation/Download?' + $.param(filters), {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Failed to download Excel file.');
                    }

                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'Invitations.xlsx';
                    document.body.appendChild(a);
                    a.click();
                    a.remove();
                    window.URL.revokeObjectURL(url);

                    Swal.close();
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'An error occurred while downloading the Excel file.',
                        confirmButtonText: 'OK'
                    });
                }
            });

            // Download PDF
            $('#downloadPdf').on('click', async function (e) {
                e.preventDefault();
                const filters = {
                    region: '@ViewBag.Region',
                    subject: '@ViewBag.Subject',
                    paperCode: '@ViewBag.PaperCode',
                    experience: '@ViewBag.Experience',
                    searchValue: table.search(),
                    format: 'pdf'
                };

                // Show spinner
                Swal.fire({
                    title: 'Downloading...',
                    text: 'Please wait while your PDF file is being generated.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    const response = await fetch('/ExaminerRecruitmentEmailInvitation/Download?' + $.param(filters), {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/pdf'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Failed to download PDF file.');
                    }

                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'Invitations.pdf';
                    document.body.appendChild(a);
                    a.click();
                    a.remove();
                    window.URL.revokeObjectURL(url);

                    Swal.close();
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'An error occurred while downloading the PDF file.',
                        confirmButtonText: 'OK'
                    });
                }
            });
        });
    </script>
}