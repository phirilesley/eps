
@model ExaminerRecruimentDataTableViewModel
@{
    var errorMessage = TempData["ErrorMessage"] as string;
    ViewData["Title"] = "Trainee Examiner Assesment";
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <script type="text/javascript">
        $(function () {
            Swal.fire({
                title: 'Error',
                text: '@Html.Raw(errorMessage)',
                icon: 'error',
                confirmButtonText: 'Ok'
            });
        });
    </script>
}

<div class="shadow p-4 rounded">
    <h2 class="mb-3 shadow-sm p-2 rounded">Trainee Examiner Assessment </h2>


    <!-- Filtering Section -->
    <div class="row teaching-experience-row mb-4 d-flex align-items-center gx-2">
        <div class="col-auto">
            <label class="form-label">Level</label><br />
            <select class="form-select form-select-sm levelSelected" id="sessionLevelFilter" name="Level" required>
                <option value="">Select Level Taught</option>
                <option value="A">A-Level</option>
                <option value="O">O-Level</option>
                <option value="G7">G-7</option>
            </select>
        </div>

        <div class="col-auto">
            <label class="form-label">Subject</label>
            <select class="form-select form-select-sm subject" name="Subject" id="subjectFilter">
                <option value="">Select Subject</option>
            </select>
        </div>

        <div class="col-auto">
            <label class="form-label">Paper Code</label>
            <select class="form-select form-select-sm" id="paperCodeFilter">
                <option value="">Select Paper Code</option>
                <option value="01">1</option>
                <option value="02">2</option>
                <option value="03">3</option>
                <option value="04">4</option>
                <option value="05">5</option>
            </select>
        </div>

        <div class="col-auto">
            <label class="form-label">Region</label>
            <select class="form-select form-select-sm" id="regionCodeFilter">
                <option value="">Select Region</option>
                <option value="01">01-Harare</option>
                <option value="02">02-Manicaland</option>
                <option value="03">03-Mashonaland East</option>
                <option value="04">04-Matabeleland North</option>
                <option value="05">05-Midlands</option>
                <option value="06">06-Masvingo</option>
                <option value="07">07-Mashonaland Central</option>
                <option value="08">08-Mashonaland West</option>
                <option value="09">09-Matabeleland South</option>
                <option value="10">10-Bulawayo</option>
            </select>
        </div>

        <div class="col-auto mt-4">
            <button id="filterButton" class="btn btn-primary btn-sm">Apply</button>
            <button id="clearFilters" class="btn btn-secondary btn-sm">Clear</button>
        </div>
    </div>


    <div class="row">

        <div class="col-12 col-md-2">
            <div class="btn btn-outline-danger" onclick="filterData('Total')"><i class="bi bi-file-earmark-ppt"></i> Total: <span id="total">0</span></div>
        </div>
        <div class="col-12 col-md-2">
            <div class="btn btn-outline-secondary" onclick="filterData('TotalA')"><i class="bi bi-file-earmark-ppt"></i> GradeA: <span id="totalA">0</span></div>
        </div>

        <div class="col-12 col-md-2">
            <div class="btn btn-outline-primary" onclick="filterData('TotalB')"><i class="bi bi-file-earmark-ppt"></i> GradeB: <span id="totalB">0</span></div>
        </div>

        <div class="col-12 col-md-2">
            <div class="btn btn-outline-warning" onclick="filterData('TotalC')"><i class="bi bi-file-earmark-ppt"></i> GradeC: <span id="totalC">0</span></div>
        </div>
        <div class="col-12 col-md-2">
            <div class="btn btn-outline-info" onclick="filterData('TotalD')"><i class="bi bi-file-earmark-ppt"></i> GradeD: <span id="totalD">0</span></div>
        </div>

        <div class="col-12 col-md-2">
            <div class="btn btn-outline-danger" onclick="filterData('Pending')"><i class="bi bi-file-earmark-ppt"></i> Pending: <span id="totalPending">0</span></div>
        </div>
    </div>
</div>

<table id="examinerTable" class="table table-responsive table-striped table-bordered" style="width:100%">
    <thead>
        <tr>
            <th>Trainee Code</th>
            <th>Name</th>
            <th>Last Name</th>
            <th>ID</th>
            <th>Subject</th>
            <th>Paper Code</th>
            <th>Phone</th>
            <th>Email</th>
            <th>Gender</th>
            <th>Grade</th>
            <th>Action</th> <!-- New column for the button -->
        </tr>
    </thead>
    <tbody>
        <!-- DataTable rows will be dynamically generated -->
    </tbody>
</table>




<!-- Modal -->
<div class="modal fade" id="examinerModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="examinerModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header shadow-sm">
                <h5 class="modal-title" style="color:#123255;" id="examinerModalTitle">Examiner Recruitment Assessment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="examinerForm">
                    <input type="hidden" id="examinerRecruitmentId" name="ExaminerRecruitmentId" />

                    <div class="form-group">
                        <label for="grade">Grade <span class="text-danger">*</span></label>
                        <select class="form-control" required id="grade" name="Grade">
                            <option value="">Select Grade</option>
                            <option value="D">D</option>
                            <option value="C">C</option>
                            <option value="B">B</option>
                            <option value="A">A</option>
                            <!-- More options -->
                        </select>
                        <div class="error-message"></div> <!-- Placeholder for error message -->
                    </div>

             @*        <div class="form-group">
                        <label for="status">Status<span class="text-danger">*</span></label>
                        <select class="form-control" id="status" required name="Status">
                            <option value="">Select Status</option>
                            <option value="Examiner">Examiner</option>
                            <!-- More options -->
                        </select>
                        <div class="error-message"></div> <!-- Placeholder for error message -->
                    </div> *@

              @*       <div class="form-group mb-3">
                        <label for="comments">Comments</label>
                        <textarea class="form-control" id="comments" placeholder="Optional" name="Comments"></textarea>
                    </div> *@

                    <div class="row text-center">
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" id="submitExaminer" onclick="saveExaminerData()">Save</button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-danger w-100" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        var urlSuffix = '@(ViewBag.UrlSuffix ?? "")';
        var table = $('#examinerTable').DataTable({
            "processing": true,
            "serverSide": true,
            "ajax": {
                "url": '@Url.Action("GetExaminerData", "ExaminerRecruitmentAssessment")' + '/' + urlSuffix,
                "type": "POST",
                "contentType": "application/x-www-form-urlencoded",
                "dataType": "json",
                "dataSrc": function (json) {
                    // Update total counts for different grades
                    $('#totalA').text(json.totalGradeA);
                    $('#totalB').text(json.totalGradeB);
                    $('#totalC').text(json.totalGradeC);
                    $('#totalD').text(json.totalGradeD);
                    $('#totalPending').text(json.totalPending);
                    $('#total').text(json.recordsTotal);

                    return json.data;
                },
                "data": function (d) {
                    // Keep the DataTable search and sorting parameters
                    d.searchValue = d.search.value;
                    d.sortColumn = d.columns[d.order[0].column].data;
                    d.sortDirection = d.order[0].dir;
                    d.skip = d.start;
                    d.take = d.length;

                    // Include filtering parameters
                    d.sessionLevel = $('#sessionLevelFilter').val();
                    d.subject = $('#subjectFilter').val();
                    d.paperCode = $('#paperCodeFilter').val();
                    d.regionCode = $('#regionCodeFilter').val();
                }
            },
            "columns": [
                { "data": "examinerCode" },
                { "data": "examinerName" },
                { "data": "lastName" },
                { "data": "cemId" },
                { "data": "subject" },
                { "data": "paperCode" },
                { "data": "phoneHome" },
                { "data": "emailAddress" },
                { "data": "gender" },
                { "data": "grade" },
                {
                    "data": "id",
                    "title": "Actions",
                    "render": function (data, type, row) {
                        return `<button class="btn btn-primary btn-sm mb-1" onclick="openModal(${row.id}, '${row.examinerName}', '${row.lastName}', '${row.subject}', '${row.paperCode}')">Grade</button>
                        <a class="btn btn-primary btn-sm ml-1" href="/ExaminerRecruitmentAssessment/GetByExaminerID/${row.id}">Detail</a>`;
                    }
                }
            ]
        });

        // Reload table when filter button is clicked
        $('#filterButton').click(function () {
            table.ajax.reload();
        });

        // Reload table when any filter field changes
        $('#sessionLevelFilter, #subjectFilter, #paperCodeFilter, #regionCodeFilter').change(function () {
            table.ajax.reload();
        });

        // Fetch subjects dynamically based on selected level
        $(document).on('change', '.levelSelected', function () {
            const $row = $(this).closest('.teaching-experience-row');
            const selectedValue = $(this).val();
            let prefix = '';

            switch (selectedValue) {
                case 'A': prefix = '6'; break;
                case 'O': prefix = '4'; break;
                case 'G7': prefix = '7'; break;
                default: prefix = '';
            }

            const $subjectDropdown = $row.find('.subject');
            if (prefix) {
                $subjectDropdown.html('<option>Loading...</option>'); // Loading indicator
                $.ajax({
                    url: '/ExaminerRecruitment/GetSubjects',
                    type: 'GET',
                    data: { prefix: prefix },
                    success: function (data) {
                        $subjectDropdown.empty().append('<option value="">Select Subject</option>');
                        $.each(data, function (index, subject) {
                            $subjectDropdown.append(
                                $('<option>', {
                                    value: subject.suB_SUBJECT_CODE,
                                    text: subject.suB_SUBJECT_DESC,
                                })
                            );
                        });
                    },
                    error: function () {
                        $subjectDropdown.html('<option value="">Select Subject</option>');
                        alert('Error fetching subjects. Please try again.');
                    }
                });
            } else {
                $subjectDropdown.empty().append('<option value="">Select Subject</option>');
            }
        });



        //open modal
        function openModal(id, name, surname, subject, paperCode) {
            // Set modal title
            $('#examinerModalTitle').html(`Full Name:  ${name} ${surname}<br>Subject: ${subject} <br> Paper Code: ${paperCode} `);

            // Populate the hidden field with the ExaminerRecruitmentId
            $('#examinerRecruitmentId').val(id);

            // Clear form fields (optional)
            $('#status').val('');
            $('#grade').val('');
            $('#comments').val('');

            // Clear any previous error messages and reset border colors
            $('.error-message').remove();
            $('#status, #grade, #comments').css('border-color', '');

            // Show the modal
            $('#examinerModal').modal('show');
        }

        function saveExaminerData() {
            var formData = {
                ExaminerRecruitmentId: $('#examinerRecruitmentId').val(),
                Grade: $('#grade').val(),
                Status: $('#status').val(),
                Comments: $('#comments').val()
            };

            // Check if required fields are filled
            var requiredFields = ['status', 'grade'];
            var hasErrors = false;

            requiredFields.forEach(function (fieldId) {
                var field = $('#' + fieldId);
                var errorElement = field.next('.error-message');
                var labelText = field.prev('label').text();

                if (!field.val()) {
                    field.css('border-color', 'red');
                    if (errorElement.length === 0) {
                        field.after('<div class="error-message" style="color: red;">' + labelText + ' is required.</div>');
                    }
                    hasErrors = true;
                } else {
                    field.css('border-color', '');
                    if (errorElement.length > 0) {
                        errorElement.remove();
                    }
                }
            });

            if (hasErrors) {
                return;
            }

            $('#submitExaminer').prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Saving...');
            console.log(JSON.stringify(formData));
            $.ajax({
                url: '/ExaminerRecruitmentAssessment/SaveExaminerTraineeGrade',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: response.message,
                            timer: 1200,
                            showConfirmButton: false
                        });

                        $('#examinerModal').modal('hide');
                        $('#examinerTable').DataTable().ajax.reload();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while saving data.'
                    });
                },
                complete: function () {
                    $('#submitExaminer').prop('disabled', false).text('Save');
                }
            });
        }


        function filterData(status) {
            $('#examinerTable').DataTable().ajax.url(`/ExaminerRecruitmentAssessment/GetExaminerData?status=${encodeURIComponent(status)}`).load();
        }



        document.addEventListener("DOMContentLoaded", function () {
            const filters = ["sessionLevelFilter", "subjectFilter", "paperCodeFilter", "regionCodeFilter"];

            // Load saved filter values from localStorage
            filters.forEach(filter => {
                const savedValue = localStorage.getItem(filter);
                if (savedValue) {
                    document.getElementById(filter).value = savedValue;
                }
            });

            // Save filter values on change
            filters.forEach(filter => {
                document.getElementById(filter).addEventListener("change", function () {
                    localStorage.setItem(filter, this.value);
                });
            });

            // Clear filters button
            document.getElementById("clearFilters").addEventListener("click", function () {
                filters.forEach(filter => {
                    document.getElementById(filter).value = "";
                    localStorage.removeItem(filter);
                });
            });
        });

    </script>
}
